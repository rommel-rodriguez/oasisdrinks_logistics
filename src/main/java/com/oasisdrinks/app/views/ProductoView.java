/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.oasisdrinks.app.views;

import com.oasisdrinks.app.controllers.ProductoController;
import com.oasisdrinks.app.controllers.MedidaController;
import com.oasisdrinks.app.models.Bebida;
import com.oasisdrinks.app.models.Medida;
import com.oasisdrinks.app.models.Producto;
import com.oasisdrinks.app.models.Receta;
import java.util.*;
import javax.print.attribute.standard.Media;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class ProductoView extends javax.swing.JFrame {
    
    DefaultTableModel tblModel; //MM, se asigna variable 
    Map<String, List<?>> cache;
    List<Producto> productos = null;
    List<Medida> medidas = null;
    List<String> tipos = null;
    boolean useCache = true;
    
    public ProductoView() {
        initComponents();
        tblDatos.getSelectionModel().addListSelectionListener(tableSelectionListener);
        this.tblModel=(DefaultTableModel)tblDatos.getModel(); //MM, Se castea con DefaultTableModel
        this.tblModel.setNumRows(0); //MM, Para inicializar en la pantalla con 0 registros

        loadDataToView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        btnNuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        tiposCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtDiasCaducidad = new javax.swing.JTextField();
        detailButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtMargen = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        medidasCombo = new javax.swing.JComboBox<>();
        refreshButton = new javax.swing.JButton();

        updateButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/system_software_update_22485.png"))); // NOI18N
        updateButton1.setText("Actualizar");
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Codigo");

        jLabel2.setText("Nombre");

        jLabel3.setText("Cantidad");

        jLabel4.setText("Tipo");

        txtCodigo.setEditable(false);
        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/boton_nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Tipo", "Medida", "Cantidad Ref.", "Caducidad", "Margen", "Costo", "Prec. Venta"
            }
        ));
        jScrollPane1.setViewportView(tblDatos);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/boton_guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/delete.png"))); // NOI18N
        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/system_software_update_22485.png"))); // NOI18N
        updateButton.setText("Actualizar");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        tiposCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Caducidad(Dias)");

        detailButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/system_software_update_22485.png"))); // NOI18N
        detailButton.setText("Detalles");
        detailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Margen Ganancia (%)");

        txtMargen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMargenActionPerformed(evt);
            }
        });

        jLabel5.setText("Medida");

        medidasCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/oasisdrinks/app/views/imagen/system_software_update_22485.png"))); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(detailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(87, 87, 87)
                                .addComponent(tiposCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDiasCaducidad, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(medidasCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMargen, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnGuardar, btnNuevo, deleteButton, updateButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtMargen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(medidasCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tiposCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtDiasCaducidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(updateButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo)
                    .addComponent(detailButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnGuardar, btnNuevo, deleteButton, updateButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // Asignando valores en blanco
        this.emptyForm();
        
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        //// MM, Se programa el boton guardar:
        //// TODO: Note that precio costo is a calculated property
        //// TODO:  Shoould precio venta also be calculated? Like according to a margin or expected profit? 
        //int cod, cant, diasCaducidad=0;
        //String nom, tipo;
        //double margen;
        //Producto producto = null;
        //Medida medida = new Medida();
        //String medidaAbrev = null;
        //MedidaController medidaCtrl = new MedidaController();

        //medidaCtrl.setCache(cache);
        //
        //nom = txtNombre.getText();
        //tipo = (String) tiposCombo.getSelectedItem();
        //medidaAbrev = (String) medidasCombo.getSelectedItem();
        //medida = medidaCtrl.buscarMedidaPorAbrev(medidaAbrev);

        //try {
        //    cod = Integer.parseInt(txtCodigo.getText());
        //    diasCaducidad = Integer.parseInt(txtDiasCaducidad.getText());
        //    cant = Integer.parseInt(txtCantidad.getText());
        //    margen = Double.parseDouble(txtMargen.getText());
        //} catch (NumberFormatException nfe) {
        //    JOptionPane.showMessageDialog(
        //   this,
        //       "Uno de los campos numericos posee un valor invalido",
        //          "Error no es numero",
        //    JOptionPane.ERROR_MESSAGE);
        //    return;
        //}
        //

        //
        //switch ( tipo ) {
        //    case "bebida":
        //        producto = new Bebida(cod, nom);
        //        producto.setMedida(medida);
        //        ;
        //    default:
        //        ;
        //}

        //agregarFila(producto); //MM, sino se invoca, no se adiciona registros
        //addRecord(producto); //MM, sino se invoca, no se adiciona registros
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        int codigo = 0;

        try {
            codigo = Integer.parseInt(this.txtCodigo.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
           this,
               "El codigo indicado no es un entero",
                  "Error no es entero",
            JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (codigo == 0)
            return;

        ProductoController inCon = new ProductoController();
        inCon.setCache(cache);
        inCon.borrarProducto(codigo);
        loadDataToTable();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int cod, cant, diasCaducidad=0;
        String nom, tipo;
        Producto producto = null;
        
        nom = txtNombre.getText();
        tipo = (String) tiposCombo.getSelectedItem();

        try {
            cod = Integer.parseInt(txtCodigo.getText());
            diasCaducidad = Integer.parseInt(txtDiasCaducidad.getText());
            cant = Integer.parseInt(txtCantidad.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
           this,
               "Uno de los campos numericos posee un valor invalido",
                  "Error no es numero",
            JOptionPane.ERROR_MESSAGE);
            return;
        }



        
        switch ( tipo ) {
            case "Bebida":
                producto = new Bebida(cod, nom);
                ;
            default:
                ;
        }

        agregarFila(producto); //MM, sino se invoca, no se adiciona registros
        addRecord(producto); //MM, sino se invoca, no se adiciona registros
        // TODO add your handling code here:

        ProductoController productoCtrl = new ProductoController();

        productoCtrl.setCache(cache);
        productoCtrl.actualizarProducto(producto);
        loadDataToTable();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateButton1ActionPerformed

    private void detailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailButtonActionPerformed
        // TODO add your handling code here:
        ProductoController productoCtrl = new ProductoController();

        productoCtrl.setCache(cache);

        int codigo = 0;
        Producto producto = null;
        RecetaView recetaView = new RecetaView();


        if (txtCodigo.getText() == null) {
            JOptionPane.showMessageDialog(this, "Se necesita un codigo de producto para mostrar los detalles",
                           "Error Codigo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try{

            codigo = Integer.parseInt(txtCodigo.getText());

        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Necesitamos que el codigo sea entero",
                           "Error Codigo no es numero", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (codigo == 0)
            return;

        producto = productoCtrl.buscarPorId(codigo);
        System.out.println("Inside ProductoView bucando: " + codigo);
        System.out.println("Inside ProductoView producto encontrado: " + producto);

        if (producto == null) {
            JOptionPane.showMessageDialog(this, "Producto con codigo " + codigo + " no existe",
                           "Error Codigo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        System.out.println("Inside ProductoView bucando: " + codigo);
        System.out.println("Inside ProductoView detailButton, producto: " + producto);

        recetaView.setProducto(producto);
        recetaView.setCache(cache);

        recetaView.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        recetaView.setVisible(true);
    }//GEN-LAST:event_detailButtonActionPerformed

    private void txtMargenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMargenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMargenActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadDataToTable();
    }//GEN-LAST:event_refreshButtonActionPerformed
    private ListSelectionListener tableSelectionListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tblDatos.getSelectedRow();
                if (selectedRow >= 0) {
                    int columnCount = tblDatos.getColumnCount();
                    List<Object> rowObjects = new ArrayList<>();

                    // Assuming the desired columns are at index 0, 1, and 2
                    for (int i = 0; i < columnCount; i++) {
                        Object obj = tblDatos.getValueAt(selectedRow, i);
                        rowObjects.add(obj);
                    }
                    fillForm(rowObjects);
                }
            }
        }
    };


    public void setCache(Map<String, List<?>> cache) {
        System.out.println("[INFO] ProductoView, inside setCache");
        ProductoController productoCtrl = new ProductoController();
        if (cache != null) {
            System.out.println("[INFO] ProductoView, cache is not null");
            this.cache = cache;
            if (this.useCache){
                this.productos = (List<Producto>) cache.get("productos");
                this.medidas = (List<Medida>) cache.get("medidas");
                productoCtrl.setCache(cache);
                // TODO: Fix this later, this should come either from the parsing the List or straight from
                // producto DAO, prefer the List version.
                this.tipos = productoCtrl.listarTipos();
            }
        }

        System.out.println("[INFO] ProductoView, before loading data to view");
        loadDataToView();
    }


    private void fillCombo(JComboBox combo, List<String> items){
        combo.removeAllItems();
        items.forEach(combo::addItem);
    }


    private void loadDataToTable(){
        List<Producto> productos = new ArrayList<>();

        this.tblModel.setRowCount(0);

        ProductoController productoCtrl = new ProductoController();

        if (this.useCache) {
            if (this.cache == null || this.productos == null)
                return;

            productoCtrl.setUseCache(true);
            productoCtrl.setCache(cache);
        }

        productos = productoCtrl.listarProductos();

        System.out.println("[INFO] Inside ProductoView's loadDataToTable, productos: " + productos);

        if (productos  == null)
            return;

        for (Producto producto: productos) {
            agregarFila(producto);
        }
    }

    private void fillTiposCombo () {
        List<String> tipos = null;
        ProductoController productoCtrl = new ProductoController();

        if (this.useCache) {
            if (this.cache == null || this.tipos == null)
                return;

            productoCtrl.setUseCache(true);
            productoCtrl.setCache(cache);
        }


        tipos = productoCtrl.listarTipos();

        if (tipos == null) {
            JOptionPane.showMessageDialog(this, "No se pudieron conseguir los tipos!",
                           "Error Tipos", JOptionPane.ERROR_MESSAGE);
            return;
        }


        fillCombo(tiposCombo, tipos);
    }


    private void fillMedidasCombo () {
        //List<Medida> meds = null;
        //List<String> abrevList = new ArrayList<>();
        //MedidaController medidaCtrl = new MedidaController();

        //if (this.useCache) {
        //    if (this.cache == null || this.medidas == null)
        //        return;

        //    medidaCtrl.setUseCache(true);
        //    medidaCtrl.setCache(cache);
        //}


        //meds = medidaCtrl.listarMedidas();

        //if (meds == null) {
        //    JOptionPane.showMessageDialog(this, "No se pudieron conseguir las medidas!",
        //                   "Error Medidas", JOptionPane.ERROR_MESSAGE);
        //    return;
        //}

        //meds.forEach(medida -> abrevList.add(medida.getAbrev()));


        //fillCombo(medidasCombo, abrevList);
    }

    private void loadDataToView() {
        loadDataToTable();
        fillTiposCombo();
        fillMedidasCombo();
        
    }

    private void emptyForm () {
        this.txtCantidad.setText("");
        this.txtCodigo.setText("");
        this.txtMargen.setText("");
        this.txtNombre.setText("");
        this.txtDiasCaducidad.setText("");
    }


    private void fillForm(List<Object> rowObjects) {
        emptyForm();
        this.txtCodigo.setText(rowObjects.get(0).toString());
        this.txtNombre.setText(rowObjects.get(1).toString());
        this.tiposCombo.setSelectedItem(rowObjects.get(2).toString());
        this.medidasCombo.setSelectedItem(rowObjects.get(3).toString());
        this.txtCantidad.setText(rowObjects.get(4).toString());
        this.txtDiasCaducidad.setText(rowObjects.get(5).toString());
        this.txtMargen.setText(rowObjects.get(6).toString());
        
    }
    private void agregarFila(Producto producto){
    //MM, esta funcion se tiene que implementar, porqque esta permite adicionar registro 
        Producto prod = producto;

        // TODO: Needs to be fixed

        tblModel.addRow(new Object[]{
                prod.getCodProducto(), 
                prod.getNomProducto(),
                prod.getTipo(),
                prod.getMedida().getAbrev(),
                prod.getCantProducto(),
                prod.getDiasCaducidad(),
                prod.getMargenGanancia(),
                prod.calcularCostoTotal(),
                prod.calcularPrecioDeVenta()
        });
    }
            
    private void addRecord(Producto insu){
    //MM, esta funcion se tiene que implementar, porqque esta permite adicionar registro 
        System.out.println("Adding Record to DB");
        // ProductoDao inDao = new ProductoCacheDao(cache);
        ProductoController inCon = new ProductoController();
        inCon.setCache(cache);
        inCon.agregarProducto(insu);

        System.out.printf("Productos Record's Size: ");
        System.out.println(cache.get("productos").size());
        System.out.println("Productos Record:");
        System.out.println(cache.get("productos"));
        System.out.println("Whole");
        System.out.println(cache);
    }

    public JButton getBtnGuardar() {
        return btnGuardar;
    }

    public JButton getBtnNuevo() {
        return btnNuevo;
    }

    public JButton getDeleteButton() {
        return deleteButton;
    }

    public JButton getDetailButton() {
        return detailButton;
    }

    public JButton getRefreshButton() {
        return refreshButton;
    }

    public JTable getTblDatos() {
        return tblDatos;
    }

    public JTextField getTxtCantidad() {
        return txtCantidad;
    }

    public JTextField getTxtCodigo() {
        return txtCodigo;
    }

    public JTextField getTxtDiasCaducidad() {
        return txtDiasCaducidad;
    }

    public JTextField getTxtMargen() {
        return txtMargen;
    }

    public JTextField getTxtNombre() {
        return txtNombre;
    }

    public JButton getUpdateButton() {
        return updateButton;
    }

    public JButton getUpdateButton1() {
        return updateButton1;
    }

    public JComboBox<String> getMedidasCombo() {
        return medidasCombo;
    }

    public JComboBox<String> getTiposCombo() {
        return tiposCombo;
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductoView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton detailButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> medidasCombo;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable tblDatos;
    private javax.swing.JComboBox<String> tiposCombo;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtDiasCaducidad;
    private javax.swing.JTextField txtMargen;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton updateButton1;
    // End of variables declaration//GEN-END:variables
}
